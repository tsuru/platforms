#!/bin/bash -el

# Copyright 2015 tsuru authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

SOURCE_DIR=/var/lib/tsuru
source ${SOURCE_DIR}/base/deploy
source ${SOURCE_DIR}/base/rc/config

PYTHON_REPO=${PYTHON_REPO:-https://heroku-buildpack-python.s3.amazonaws.com/heroku-18/runtimes}
GET_PIP_URL=${GET_PIP_URL:-https://bootstrap.pypa.io/get-pip.py}

LATEST_39="3.9.0"
LATEST_38="3.8.6"
LATEST_37="3.7.9"
LATEST_36="3.6.12"
LATEST_35="3.5.10"
LATEST_34="3.4.10"
LATEST_27="2.7.18"
PYPY_36="pypy3.6-7.3.2"
PYPY_27="pypy2.7-7.3.2"
LATEST_PYTHON_VERSIONS=(${LATEST_39} ${LATEST_38} ${LATEST_37} ${LATEST_36} ${LATEST_35} ${LATEST_34} ${LATEST_27} ${PYPY_36} ${PYPY_27})
PYTHON_VERSION_DEFAULT="${LATEST_27}"
VERSION_ORIGIN="default"
PYTHON_BASE_DIR="/home/application/python"
INSTALLED_PYTHON_FILE="${PYTHON_BASE_DIR}/.installed-version"

if [ -n "${PYTHON_VERSION}" ]; then
    VERSION_ORIGIN="PYTHON_VERSION environment variable"
else
    PYTHON_VERSION="${PYTHON_VERSION_DEFAULT}"
fi

if [ -f "${CURRENT_DIR}/.python-version" ]; then
    tmp_version=$(cat "${CURRENT_DIR}/.python-version")
    if [ -n "${tmp_version}" ]; then
        PYTHON_VERSION=${tmp_version}
        VERSION_ORIGIN=".python-version file"
    fi
fi

INSTALL_PYTHON=1
if [[ -f ${PYTHON_BASE_DIR}/bin/python ]] && [[ -f ${INSTALLED_PYTHON_FILE} ]]; then
    INSTALLED_VERSION=$(cat ${INSTALLED_PYTHON_FILE})
    if [[ ${INSTALLED_VERSION} == ${PYTHON_VERSION} ]]; then
        echo "-- Using already installed python version: ${INSTALLED_VERSION} --"
        INSTALL_PYTHON=0
    fi
fi

function choose_closest_python() {
    IFS=$'\n'
    local VERSIONS=$(sort -rV <<<"${LATEST_PYTHON_VERSIONS[*]}")
    unset IFS
    local TRY_PYTHON_VERSION="$1"
    local CHOSEN_PYTHON_VERSION=""
    local LAST_PYTHON_VERSION=""
    while [[ "${LAST_PYTHON_VERSION}" != "${TRY_PYTHON_VERSION}" ]]; do
        if echo "${VERSIONS}" | grep "^${TRY_PYTHON_VERSION}" >/dev/null; then
            CHOSEN_PYTHON_VERSION=$(echo "${VERSIONS}" | grep "^${TRY_PYTHON_VERSION}" | head -1)
            break
        fi
        LAST_PYTHON_VERSION="${TRY_PYTHON_VERSION}"
        TRY_PYTHON_VERSION=$(echo ${TRY_PYTHON_VERSION} | sed -E 's/(.*)(\.|-)[^\.]*$/\1/g')
    done
    echo "${CHOSEN_PYTHON_VERSION}"
}

function install_python() {
    DOWNLOAD_VERSION=${PYTHON_VERSION}
    if [[ ${DOWNLOAD_VERSION} =~ ^[0-9]\..* ]]; then
        DOWNLOAD_VERSION="python-${DOWNLOAD_VERSION}"
    fi

    DOWNLOAD_URL="${PYTHON_REPO}/${DOWNLOAD_VERSION}.tar.gz"
    if ! curl -m 10 -o/dev/null -ILfs $DOWNLOAD_URL; then
        # The exact requested version returned an http error so it's probably
        # not available, let's try finding the closest one.
        NEW_PYTHON_VERSION=$(choose_closest_python $PYTHON_VERSION)

        if [[ "${NEW_PYTHON_VERSION}" == "" ]]; then
            echo "Python version '${PYTHON_VERSION}' (${VERSION_ORIGIN}) is not supported."
            PYTHON_VERSION="${PYTHON_VERSION_DEFAULT}"
            VERSION_ORIGIN="default"
        elif [[ "${NEW_PYTHON_VERSION}" != "${PYTHON_VERSION}" ]]; then
            echo "Exact python version '${PYTHON_VERSION}' (${VERSION_ORIGIN}) is not supported."
            echo "Closest version is '${NEW_PYTHON_VERSION}'."
            PYTHON_VERSION="${NEW_PYTHON_VERSION}"
            VERSION_ORIGIN="${VERSION_ORIGIN} (closest)"
        fi
    fi

    if [[ ${INSTALLED_VERSION} == ${PYTHON_VERSION} ]]; then
        echo "-- Using already installed python version: ${INSTALLED_VERSION} --"
        return
    fi

    DOWNLOAD_VERSION=${PYTHON_VERSION}
    if [[ ${DOWNLOAD_VERSION} =~ ^[0-9]\..* ]]; then
        DOWNLOAD_VERSION="python-${DOWNLOAD_VERSION}"
    fi
    DOWNLOAD_URL="${PYTHON_REPO}/${DOWNLOAD_VERSION}.tar.gz"

    # install python binaries
    rm -rf "${PYTHON_BASE_DIR}"
    mkdir -p "${PYTHON_BASE_DIR}"
    echo "-- Using python version: ${PYTHON_VERSION} (${VERSION_ORIGIN}) from $DOWNLOAD_URL --"
    if ! (curl -m 120 -sS --retry 3 -L "$DOWNLOAD_URL" | tar xz -C "${PYTHON_BASE_DIR}"); then
        echo "ERROR: python version $PYTHON_VERSION is not supported."
        exit 1
    fi

    hash -r

    # install pip
    if [[ "${PYTHON_PIP_VERSION}" ]]; then
        PIP_VERSION_SPEC="${PYTHON_PIP_VERSION}"
        if [[ "$PYTHON_PIP_VERSION" =~ ^[0-9] ]]; then
            if [[ ${PYTHON_PIP_VERSION/.*/} -lt 19 ]]; then
                PIP_EXTRA_OPTS="--process-dependency-links"
            fi
            PIP_VERSION_SPEC="==${PYTHON_PIP_VERSION}"
        fi
        echo "Using pip version ${PIP_VERSION_SPEC}"
        curl -m 120 -LsS ${GET_PIP_URL} | python - "pip${PIP_VERSION_SPEC}"
    else
        echo "Using default pip version"
        curl -m 120 -LsS ${GET_PIP_URL} | python
    fi

    echo ${PYTHON_VERSION} >${INSTALLED_PYTHON_FILE}
}

if [[ ${INSTALL_PYTHON} == 1 ]]; then
    install_python
fi

# install project deps with pipenv or pip
pushd "$CURRENT_DIR"
if [ -f "${CURRENT_DIR}/Pipfile.lock" ]; then
    echo "Pipfile.lock detected, using 'pipenv install --system --deploy' to install dependencies"
    pip install pipenv
    pipenv install --system --deploy
elif [ -f "${CURRENT_DIR}/requirements.txt" ]; then
    echo "requirements.txt detected, using 'pip install -r ./requirements.txt' to install dependencies"
    pip install -r ./requirements.txt
elif [ -f "${CURRENT_DIR}/setup.py" ]; then
    echo "setup.py detected, using 'pip install -e .' to install dependencies"
    pip install ${PIP_EXTRA_OPTS:-} -e .
fi
popd
