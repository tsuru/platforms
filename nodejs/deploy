#!/bin/bash -le

# Copyright 2015 tsuru authors. All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

SOURCE_DIR=/var/lib/tsuru
source ${SOURCE_DIR}/base/rc/config

function calculate_deps_hash() {
    local basepath=$1
    set +e
    pushd ${basepath} >/dev/null
    tail -n +1 \
        ./package.json \
        ./package-lock.json \
        ./yarn.lock \
        2>/dev/null | sha256sum | awk '{print $1}'
    popd >/dev/null
    set -e
}

function archive_deps_hash() {
    if [[ ! -f /home/application/archive.tar.gz ]]; then
        return
    fi
    tmpdir=$(mktemp -d)
    trap "rm -rf ${tmpdir}" EXIT
    set +e
    tar -C ${tmpdir} -xzf /home/application/archive.tar.gz package.json package-lock.json yarn.lock 2>/dev/null
    set -e
    calculate_deps_hash ${tmpdir}
}

function track_deps() {
    mkdir -p /home/application/nodejs
    set +e
    cp ${CURRENT_DIR}/package.json \
        ${CURRENT_DIR}/package-lock.json \
        ${CURRENT_DIR}/yarn.lock \
        /home/application/nodejs/ \
        2>/dev/null
    set -e
}

# If dependency files didn't change it's safe for us to protect the
# `node_modules` directory from being removed by rsync. If dependency files
# were updated it's safer to remove node_modules and reinstall everything.
if [[ -d ${CURRENT_DIR}/node_modules ]]; then
    old_deps_hash=$(calculate_deps_hash /home/application/nodejs)
    new_deps_hash=$(archive_deps_hash)

    if  [[ "${old_deps_hash}" == "${new_deps_hash}" ]]; then
        keep=1
        reason="Dependency files hash match"
    elif [[ -n "${KEEP_NODE_MODULES}" ]] ; then
        keep=1
        reason="Environment variable \$KEEP_NODE_MODULES is set"
    fi
    if [[ $keep == 1 ]]; then
        echo "${reason}, preserving old node_modules directory."
        PLATFORM_EXTRA_RSYNC_ARGS='--filter "protect node_modules/"'
    fi
fi

source ${SOURCE_DIR}/base/deploy

NODE_VERSION=--lts

if [ -f ${CURRENT_DIR}/.nvmrc ]; then
    TMP_VERSION=$(cat ${CURRENT_DIR}/.nvmrc)
elif [ -f ${CURRENT_DIR}/.node-version ]; then
    TMP_VERSION=$(cat ${CURRENT_DIR}/.node-version)
elif [ -f ${CURRENT_DIR}/package.json ]; then
    TMP_VERSION=$(jq -r '.engines | .node | select(. != null)' ${CURRENT_DIR}/package.json)
fi

if [ -n "$TMP_VERSION" ]; then
    NODE_VERSION=${TMP_VERSION}
fi

if [ $NPM_REGISTRY ]; then
    echo "registry = $NPM_REGISTRY" > ~/.npmrc
fi

if [ $NVM_IOJS_ORG_MIRROR ] && [[ "$NODE_VERSION" =~ ^(iojs-v|v)?[123](\.[0-9]+)?(\.[0-9]+)? ]]; then
    echo "disturl = $NVM_IOJS_ORG_MIRROR" >> ~/.npmrc
elif [ $NVM_NODEJS_ORG_MIRROR ]; then
    echo "disturl = $NVM_NODEJS_ORG_MIRROR" >> ~/.npmrc
fi

export NVM_DIR=${NVM_DIR:-${HOME}/.nvm}
[ ! -e ${NVM_DIR} ] && mkdir -p ${NVM_DIR}

set +e
. ${NVM_DIR}/nvm.sh
nvm_source_exit_code="$?"
set -e

if [[ "$nvm_source_exit_code" != "0" ]]; then
    echo "WARNING: sourcing nvm.sh returned exit status ${nvm_source_exit_code}. This may not be a problem but report this message if the deploy fails."
fi

set +e
nvm install "${NODE_VERSION}"
nvm_install_exit_code="$?"
set -e

if [[ "$nvm_install_exit_code" != "0" ]]; then
    echo "ERROR: \`nvm install \"${NODE_VERSION}\"\` returned exit status ${nvm_install_exit_code}."
    exit "${nvm_install_exit_code}"
fi

nvm cache clear

# removing default alias - fix X.Y.* wildcard bug on subsequents deploys
if [[ -f ~/.nvm/alias/default ]]; then
    rm ~/.nvm/alias/default
fi

rm -f ~/.nvm_bin
ln -s $NVM_BIN ~/.nvm_bin

# Set --production flag only if NPM_CONFIG_PRODUCTION env var is not set
if [ -z "$NPM_CONFIG_PRODUCTION" ]; then
  PRODUCTION_FLAG="--production"
else
  PRODUCTION_FLAG=""
fi

track_deps

if [ -f "${CURRENT_DIR}/package.json" ] && [ -f "${CURRENT_DIR}/yarn.lock" ]; then
    echo "yarn.lock detected, using yarn to install node packages"
    YARN_DEFAULT_VERSION="1.21.1"
    yarn_bin=${NVM_BIN}/yarn
    if [ ! -f $yarn_bin ]; then
        package_version=$(node -e "
        var pkg = require('${CURRENT_DIR}/package.json');
        var options = ['engines', 'dependencies', 'devDependencies'];
        for (var o of options) {
            if (pkg[o] && pkg[o].yarn) {
                console.log(pkg[o].yarn);
                break;
            }
        }")
        YARN_VERSION=${package_version:-$YARN_DEFAULT_VERSION}
        npm install -g yarn@${YARN_VERSION}
    fi
    if [ $NPM_REGISTRY ]; then
        echo "registry \"$NPM_REGISTRY\"" > ~/.yarnrc
        sed -i -E "s|https?://registry.yarnpkg.com|$NPM_REGISTRY|g" ${CURRENT_DIR}/yarn.lock
        sed -i -E "s|https?://registry.npmjs.org|$NPM_REGISTRY|g" ${CURRENT_DIR}/yarn.lock
    fi
    pushd $CURRENT_DIR
    set +e
    exec 9>&1
    TMPFILE=`mktemp`
    YARN_OUTPUT=`${yarn_bin} install ${PRODUCTION_FLAG} --non-interactive 2>&1 | tee /dev/fd/9; echo ${PIPESTATUS[0]} > $TMPFILE`
    STATUS=`cat $TMPFILE 2>/dev/null || echo 1`
    set -e
    if [ $STATUS -ne 0 ]; then
      if [[ $YARN_OUTPUT =~ ^.*unknown\ option.*--non-interactive.*$ ]]; then
        # If --non-interactive flag is not available (older yarn versions), falls back to the default install command
        ${yarn_bin} install ${PRODUCTION_FLAG}
      else
        exit $STATUS
      fi
    fi
    yarn cache clean || true
    popd
elif [ -f ${CURRENT_DIR}/package.json ] ; then
    if [ -f "${CURRENT_DIR}/package-lock.json" ]; then
        sed -i -E "s|https?://registry.npmjs.org|$NPM_REGISTRY|g" ${CURRENT_DIR}/package-lock.json
    fi
    pushd $CURRENT_DIR
    npm install ${PRODUCTION_FLAG}
    npm cache clean --force || true
    popd
fi
